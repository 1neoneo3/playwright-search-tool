name: CI Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        # Additional tools for CI
        pip install mypy pip-audit ruff

    - name: Install Playwright and dependencies
      run: |
        playwright install --with-deps

    - name: Lint and format with ruff
      run: |
        ruff check . --output-format=github
        ruff format --check .

    - name: Type check with mypy
      run: |
        mypy src/playwright_search/ --ignore-missing-imports --check-untyped-defs
      continue-on-error: true  # Allow mypy failures initially

    - name: Security check with pip-audit
      run: |
        pip-audit --desc --format=json --output=audit-report.json
        pip-audit --desc
      continue-on-error: true  # Don't fail CI on security issues initially

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run E2E tests (headless)
      run: |
        xvfb-run -a python -m pytest tests/ -k "not test_parallel_search" -v --tb=short
      env:
        HEADLESS: true
        PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.playwright
      continue-on-error: true  # E2E tests may be flaky

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-3.12
        path: |
          .coverage
          audit-report.json
          pytest.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint-only:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy

    - name: Quick lint check
      run: |
        echo "::group::Ruff Check"
        ruff check . --output-format=github
        echo "::endgroup::"
        
        echo "::group::Ruff Format Check"
        ruff format --check . --diff
        echo "::endgroup::"

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-audit safety bandit

    - name: Security audit with pip-audit
      run: |
        pip-audit --desc --format=json --output=pip-audit.json
        pip-audit --desc

    - name: Security audit with safety
      run: |
        safety check --json --output=safety-report.json
        safety check
      continue-on-error: true

    - name: Security analysis with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          pip-audit.json
          safety-report.json
          bandit-report.json